#!/usr/bin/python
# -*- coding:utf-8 -*-
import time
from datetime import datetime
import smbus
import paho.mqtt.client as mqtt  # Import MQTT library

# MQTT configuration
MQTT_BROKER = 'localhost'  # Use 'localhost' if running on the same Raspberry Pi
MQTT_PORT = 1883
MQTT_TOPIC = 'pressure_data'

# I2C address
LPS22HB_I2C_ADDRESS = 0x5C

# Register addresses
LPS_ID = 0xB1
LPS_WHO_AM_I = 0x0F
LPS_CTRL_REG1 = 0x10
LPS_CTRL_REG2 = 0x11
LPS_STATUS = 0x27
LPS_PRESS_OUT_XL = 0x28
LPS_PRESS_OUT_L = 0x29
LPS_PRESS_OUT_H = 0x2A

class LPS22HB(object):
    def __init__(self, address=LPS22HB_I2C_ADDRESS):
        self._address = address
        self._bus = smbus.SMBus(1)
        self.LPS22HB_RESET()
        self._write_byte(LPS_CTRL_REG1, 0x02)

    def LPS22HB_RESET(self):
        Buf = self._read_u16(LPS_CTRL_REG2)
        Buf |= 0x04
        self._write_byte(LPS_CTRL_REG2, Buf)
        while Buf:
            Buf = self._read_u16(LPS_CTRL_REG2)
            Buf &= 0x04

    def LPS22HB_START_ONESHOT(self):
        Buf = self._read_u16(LPS_CTRL_REG2)
        Buf |= 0x01
        self._write_byte(LPS_CTRL_REG2, Buf)

    def _read_byte(self, cmd):
        return self._bus.read_byte_data(self._address, cmd)

    def _read_u16(self, cmd):
        LSB = self._bus.read_byte_data(self._address, cmd)
        MSB = self._bus.read_byte_data(self._address, cmd + 1)
        return (MSB << 8) + LSB

    def _write_byte(self, cmd, val):
        self._bus.write_byte_data(self._address, cmd, val)

def publish_data_to_mqtt(client, data):
    # Publish data to MQTT broker
    client.publish(MQTT_TOPIC, data)
    print(f" [x] Sent {data} to MQTT")

if __name__ == '__main__':
    PRESS_DATA = 0.0
    u8Buf = [0, 0, 0]
    print("\nPressure Sensor Test Program ...\n")
    lps22hb = LPS22HB()

    index = 0

    # Set up MQTT client
    mqtt_client = mqtt.Client()
    mqtt_client.connect(MQTT_BROKER, MQTT_PORT, 60)
    mqtt_client.loop_start()

    while True:
        try:
            time.sleep(0.1)
            lps22hb.LPS22HB_START_ONESHOT()
            if (lps22hb._read_byte(LPS_STATUS) & 0x01) == 0x01:  # a new pressure data is generated
                u8Buf[0] = lps22hb._read_byte(LPS_PRESS_OUT_XL)
                u8Buf[1] = lps22hb._read_byte(LPS_PRESS_OUT_L)
                u8Buf[2] = lps22hb._read_byte(LPS_PRESS_OUT_H)
                PRESS_DATA = ((u8Buf[2] << 16) + (u8Buf[1] << 8) + u8Buf[0]) / 4096.0

                # Get current epoch time and formatted time
                epoch_time = int(time.time())
                epoch_str = str(epoch_time)
                current_time = datetime.now().strftime("%S/%d/%m/%Y")

                # Prepare data to publish
                data = f'pressure_data,host=raspberrypi index={index},epoch_time={epoch_time},pressure={PRESS_DATA:.2f}'

                # Print data for reference
                print(data)

                # Publish data to MQTT
                publish_data_to_mqtt(mqtt_client, data)

                # Increment index for the next data point
                index += 1

        except KeyboardInterrupt:
            print("\nData collection stopped.")
            break
        except Exception as e:
            print(f"Error: {str(e)}")

    mqtt_client.loop_stop()
    mqtt_client.disconnect()
